import { NodemailerDefaultsDrivers, NodemailerTransportDrivers } from './drivers.interface';
import { ModuleMetadata, Type } from '@nestjs/common/interfaces';
import { NodemailerDrivers } from '../constants/drivers.constants';
export interface NodemailerOptions<T extends NodemailerDrivers> {
    transport: NodemailerTransportDrivers<T>;
    defaults: NodemailerDefaultsDrivers<T>;
}
export interface NodemailerOptionsFactory<T extends NodemailerDrivers> {
    createNodemailerOptions(): Promise<NodemailerOptions<T>> | NodemailerOptions<T>;
}
export interface NodemailerAsyncOptions<T extends NodemailerDrivers> extends Pick<ModuleMetadata, 'imports'> {
    name?: string;
    inject?: any[];
    useClass?: Type<NodemailerOptionsFactory<T>>;
    useExisting?: Type<NodemailerOptionsFactory<T>>;
    useFactory?: (...args: any[]) => Promise<NodemailerOptions<T>> | NodemailerOptions<T>;
}
